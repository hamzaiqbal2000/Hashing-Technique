// CPP program to implement hashing with chaining 
#include<iostream> 
#include <list> 
using namespace std;

class HashTable {//class for hashtable
	int size_of_array;
	list<int>* table;
public:
	HashTable(int size_of_array);//constructor
	void insert_data(int key);
	void delete_data(int key);
	int funtion_hash(int key) {
		return key % size_of_array;
	}
	void print_hash();
};

HashTable::HashTable(int size_of_array) {//constructor for initialization
	this->size_of_array = size_of_array;
	table = new list<int>[this->size_of_array];
}

void HashTable::insert_data(int key) {//funtion for inserting data
	int index_of_list = funtion_hash(key);
	table[index_of_list].push_back(key);
}

void HashTable::delete_data(int key) {//function for deleting data
	int index_of_list = funtion_hash(key);//finding the index of the key
	list<int> ::iterator i;//interating to the array of linked list
	for (i = table[index_of_list].begin(); i != table[index_of_list].end(); i++) {
		if (*i != key) {
			break;
		}
	}

}

void HashTable::print_hash() {//function for printing of hash table
	for (int i = 0; i < size_of_array; i++) {
		cout << i;
		for (auto x : table[i]) {
			cout << "-->" << x;
		}
		cout << endl;
	}
}

int main() {
	int A[] = { 15, 11, 27, 8, 12 };
	int n = sizeof(A) / sizeof(A[0]);
	HashTable h(7);
	for (int i = 0; i < n; i++) {
		h.insert_data(A[i]);
	}
	h.delete_data(12);
	h.print_hash();

}


